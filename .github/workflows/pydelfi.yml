# This workflow will install Python dependencies and run tests with a single version of Python

name: pydelfi-archived

on:
  push:
    branches: [ "pydelfi" ]
  pull_request:
    branches: [ "pydelfi" ]

permissions:
  contents: read

jobs:
  pydelfi_build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Install pyenv and Python 3.6
        run: |
          sudo apt-get update
          sudo apt-get install -y make build-essential libssl-dev zlib1g-dev \
                                  libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \
                                  libncurses5-dev libncursesw5-dev xz-utils tk-dev
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PATH"
          curl https://pyenv.run | bash
          export PATH="$PYENV_ROOT/bin:$PATH"
          eval "$(pyenv init -)"
          eval "$(pyenv virtualenv-init -)"
          pyenv install 3.6
          pyenv global 3.6

      - name: Check Python version
        run: |
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PYENV_ROOT/shims:$PATH"
          eval "$(pyenv init -)"
          python --version
      - name: Setup MPI
        uses: mpi4py/setup-mpi@v1
        with:
          mpi: 'openmpi'
      - name: Install dependencies
        run: |
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PYENV_ROOT/shims:$PATH"
          eval "$(pyenv init -)"
          python --version
          python -m pip install --upgrade pip
          pip install .[tensorflow,dev]
          pip install flake8 pytest coverage
      - name: Lint with Ruff
        run: |
          pip install ruff
          ruff check .
        continue-on-error: true
      - name: Test with pytest
        run: |
          echo "Running pydelfi tests"
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PYENV_ROOT/shims:$PATH"
          eval "$(pyenv init -)"
          python3 --version
          COVERAGE_FILE=coverage_file_pydelfi python3 -m coverage run --source=ili -m pytest tests/test_pydelfi.py
        shell: bash
#      - name: Archive pydelfi code coverage results
#        uses: actions/upload-artifact@v4
#        with:
#          name: coverage_pydelfi
#          path: coverage_file_pydelfi
