backend: 'sbi'  # sbi or pydelfi backend

posterior_path: './toy/toy_SNRE_posterior.pkl'  # Path to posterior model
output_path: './toy'  # Where to save the metrics
labels: ['t1', 't2', 't3']  # Where to save the metrics

# If True, run validation for all networks as one ensemble posterior
# If False, run validation for each network separately
ensemble_mode: True

metrics:
  single_example:
    # Plot an example posterior for a single input
    module: 'ili.validation.metrics'
    class: 'PlotSinglePosterior'
    args:
      num_samples: 1200
      sample_method: 'slice_np_vectorized'  # MCMC slice sampling (pyro backend)
      sample_params:
        num_chains: 1
        burn_in: 100
        thin: 10

  # Compute and plot coverage metrics across the test set
  coverages:
    module: 'ili.validation.metrics'
    class: 'PosteriorCoverage'
    args:
      num_samples: 100
      sample_method: 'slice_np_vectorized'
      sample_params:
        num_chains: -1  # use all available cores
        burn_in: 20
        thin: 1
      plot_list: ["coverage", "histogram", "predictions", "tarp"]
